/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 **************************************************************************** */

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.StdOut;

import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

public class Solver {

    private static class Node {
        private int priority;
        private int moves;
        private int manhattan;
        private Board board;

        public Node(Board board, int moves) {
            this.board = board;
            this.moves = moves;
            this.manhattan = board.manhattan();
            this.priority = this.moves + this.manhattan;
        }

        public static Comparator<Node> getManhattanComparator() {
            return new Comparator<Node>() {
                public int compare(Node o1, Node o2) {
                    return Integer.compare(o1.priority, o2.priority);
                }
            };
        }
    }

    private int moves = 0;
    private List<Board> solutions;
    private boolean isSolvable;

    // find a solution to the initial board (using the A* algorithm)
    public Solver(Board initial) {
        if (initial == null)
            throw new IllegalArgumentException("initial board is null.");

        moves = 0;
        solutions = new LinkedList<>();
        solve(initial);
    }

    private void solve(Board initial) {
        MinPQ<Node> pq = new MinPQ<>(Node.getManhattanComparator());
        // MinPQ<Board> twinPq = new MinPQ<>(manhattanComparator());
        Board pre = null;
        // Board twinPre = null;

        pq.insert(new Node(initial, moves));
        showInfo(pq.min());
        System.out.println("====================");

        while (solutions.isEmpty()) {
            Node node = pq.delMin();
            showInfo(node);
            Board board = node.board;
            if (board.isGoal()) {
                solutions.add(board);
                isSolvable = true;
            }
            else {
                pre = board;
                moves++;
                for (Board b : board.neighbors()) {
                    if (!b.equals(pre)) {
                        Node n = new Node(b, moves);
                        pq.insert(n);
                        showInfo(n);
                    }
                }
                System.out.println("====================");
            }
        }
    }

    private void showInfo(Node node) {
        System.out.println("priority  = " + node.priority);
        System.out.println("moves     = " + node.moves);
        System.out.println("manhattan = " + node.manhattan);
        System.out.println(node.board);
    }

    // is the initial board solvable? (see below)
    public boolean isSolvable() {
        return isSolvable;
    }

    // min number of moves to solve initial board; -1 if unsolvable
    public int moves() {
        if (solutions == null || solutions.size() == 0) return -1;
        else return moves;
    }

    // sequence of boards in a shortest solution; null if unsolvable
    public Iterable<Board> solution() {
        return solutions;
    }

    // test client (see below)
    public static void main(String[] args) {
        // create initial board from file
        In in = new In(args[0]);
        int n = in.readInt();
        int[][] tiles = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                tiles[i][j] = in.readInt();
        Board initial = new Board(tiles);

        // solve the puzzle
        Solver solver = new Solver(initial);

        // print solution to standard output
        if (!solver.isSolvable())
            StdOut.println("No solution possible");
        else {
            StdOut.println("Minimum number of moves = " + solver.moves());
            for (Board board : solver.solution())
                StdOut.println(board);
        }
    }
}
